names(n) <- c("a":"t")
names(n) <- c(a:t)
letters[n]
length(n)
names (n) <- letters[1:20]
n
n <- n[-(16:20)]
length(n)
diciembre - 5
#script para el análisis de mis gastos mensuales
#Rcañas   29 Sep 2020
gastos=c(100,300,300,50)
clear
cbind(vector1, vector2)
vector1 <- 1:4
vector2 <- c (12,34,56,34)
cbind(vector1,vector2)
rbind(vector1,vector2)
dim(cbind(vector1,vector2))
nraw(dim(cbind(vector1,vector2)))
nrow(dim(cbind(vector1,vector2)))
ncol(dim(cbind(vector1,vector2)))
vector3 <- 1:2
cbind(vector3, vector2)
M <- matrix (c(vector1, vector2), nrow=4)
M
M <- matrix (c(vector1, vector2), nrow=4, byrow= T)
M
class M
class(M)
M
t(M)
colnames (M) <- c("v1", "v2")
rownames(M)<- c ("gen1", "gen2", "gen3", "gen4")
M
paste("gen", 1:50, sep="")
M
M[1,]
M[,1]
M[c(1:2),]
M[,v1]
M[,"v1"]
M["gen3",]
M["gen3","v1"]
M
M[,c(2,1)]
M1 <- M[,c(2,1)]
M[1,1] <- 1000
M
M[,2] <- M[,2] * 2
M
M[,2] <- M[,2] * 5
M
M[c(TRUE, FALSE, FALSE, TRUE), c(FALSE, TRUE)]
v1 <- c(1:5)
v1
c(v1, "hola")
class(c(v1, "hola"))
vector1 <- (1, 5,9)
vector1 <- c(1, 5,9)
vector2 <- c(2,6,10)
vector3 <- c(3,7,11)
vector4 <- c(4,8,12)
M <- matrix (c(vector1, vector2, vector3, vector4), nrow=4)
M
M <- matrix (c(vector1, vector2, vector3, vector4), nrow=4, bycol=T)
M <- matrix (c(vector1, vector2, vector3, vector4), nrow=4, byrow=T)
M
class(M[1,2])
colnames(M) <- ("a", "b", "c", "d")
colnames(M) <- c("a", "b", "c", "d")
colnames(M) <- c("a", "b", "c")
rownames(M) <- c("A", "B", "C")
rownames(M) <- c("A", "B", "C", "D")
M
N <- t(M)
N
NM <- N * M
NM <- N %*% M
NM
MN <- M %*% N
dim(MN)
unVector <- 1:10
unVector
otroVector <- LETTERS
otroVector
unaMatriz <- cibind (1:10, 10:1)
unaMatriz <- cibind(1:10, 10:1)
unaMatriz <- cbind(1:10, 10:1)
rownames (unaMatriz) <- LETTERS[1:10]
colnames (unaMatriz) <- letters[1:2]
unaMatriz
dim(unaMatriz)
lista0 <- list (unVector, otroVector, unaMatriz)
lista0
class(lista0)
class(lista0[1])
class(lista0[[1]])
names(lista0) <- c("uno", "dos", "tres")
lista0
names(lista0)
lista0[["dos"]]
lista0[[2]]
lista$dos
lista0$dos
rm(list =())
rm(list =is())
rm(list =ls())
M <- cbind(1:6)
M
V <- c("rojo", "verde", "azul")
V
L <- list (M, V)
L
class(L)
class(L[[1]])
class(L[[V]])
class(L[[2]])
names(L) <- c("num", "colores")
M <- (rbind(c(1, 2, 3), c(4, 5, 6))
L
View(M)
log <- ("TRUE", "FALSE", "FALSE")
log <- c("TRUE", "FALSE", "FALSE")
L <- c(L, log)
L
log
rm (list = ls ())
L <- list(rbind(c(1,2,3), c(4,5,6)), c("rojo", "verde", "azul"))
L
names(L) <- c("num", "colores")
log <- c("TRUE", "FALSE", "TRUE")
L[[3]] <- log
L
names(L[3]) <- "log"
names(L)
L
names(L)[3] <- "log"
names(L)
L[[1]][1,] <- L[[3]]
L
L$log <- c(TRUE, FALSE, FALSE)
l
L
L[[1]][1,] <- L[[3]]
L
class(L[["log"]])
L[[colores]]
col <- L$colores
col
L$colores[-2]
L$colores
L$colores <- L$colores[-2]
L
col
LM <- list(L, c("blanco", "negro"))
LM
L[[2]]
LM[[4]]
LMN <- c(LM, log)
LMN
example(sqrt)
clear
españita
v <- 5
identical (5, v)
identical (10:15, c(10,11,12,13,14,15))
10:15
a <- c(10, 11,12,13,14,15)
c
a
a[3:1]
vector <- c(TRUE, FALSE, FALSE, TRUE)
class(vector)
lista <- list("n" = 1:4, "l" = letters[1:4])
class(lista)
$n
lista
matriz <- matrix(c(22,23), nrow = 4, ncol= 2, byrow = TRUE)
matriz
dim(matriz)
data.frame (vector, lista)
dt <- data.frame (vector, lista)
data1 <- data.frame(matriz)
data.frame
data1
matriz
clear
rownames (matriz) <- LETTERS[1:4]
colnames (matriz) <- letters[1:2]
data2 <- data.frame(lista, matriz, vector)
data2
data1
data1[,3] <- 44
dataq
data1
data2
data2[1:2, 1:3]
data2[1:3, c("l", "a")]
data2$n
nrow(data1)
ncol(data1)
summary(data2$n)
attach(data2)
summary(n)
deattach(data2)
detach(data2)
data2
class(data2$l)
data2$n
data2$l
f <- factor(c(LETTERS[1:3], "A", "C"))
f
lista1 <- list(color=("rojo","azul","verde","naranja","blanco"), cant=(21,53,14,8,32), disp=(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
lista1 <- list(color=("rojo","azul","verde","naranja","blanco"), cant=(21,53,14,8,32), disp=(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
a <- ("rojo","azul","verde","naranja","blanco")
b <- (21,53,14,8,32)
c <- (TRUE, FALSE, TRUE, TRUE, FALSE)
a <- c("rojo","azul","verde","naranja","blanco")
b <- c(21,53,14,8,32)
c <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
a
lista1 <- list(color=c("rojo","azul","verde","naranja","blanco"), cant=c(21,53,14,8,32), disp=c(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
del a
lista1 <- list(color=c("rojo","azul","verde","naranja","blanco"), cant=c(21,53,14,8,32), disp=c(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
lista1 <- list(color=c("rojo","azul","verde","naranja","blanco"), cant=c(21,53,14,8,32), disp=c(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
DF <- data.frame(lista1)
class(DF)
colnames(DF)
DF <- data.frame(lista1)
DF
class(DF)
DF <- data.frame(DF, tam = c(1.5,0.8,3,2.87,4))
DF
row.names(DF) <- c(O1, O2, O3, O4, O4)
DF
row.names(DF) <- c("O1", "O2", "O3", "O4", "O5")
DF
DF$disp==0 <- NA
DF$cant[DF$disp==0] <- NA
DF
attach(DF)
summary(tam)
class(DF$color)
tipo1 <- factor(c(1, 2, 2, 1, 1))
tipo2 <- factor(c(0,1,3,1,3))
DF <- data.frame(DF, tipo1, tipo2)
class(DF$tipo1)
DF$tipo1
DF$tipo2
df
DF
## EJERCICIO 1
# crea una lista con la siguiente info:
lista1 <- list(color=c("rojo","azul","verde","naranja","blanco"), cant=c(21,53,14,8,32), disp=c(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
# crea un data frame (DF) y cosas
DF <- data.frame(lista1)
DF
class(DF)
colnames(DF)
# Añade una nueva variable
DF <- data.frame(DF, tam = c(1.5,0.8,3,2.87,4))
DF
# Qué nombres tienen las filas de nuestro data frame
row.names(DF) <- c("O1", "O2", "O3", "O4", "O5")
DF
# sustituye la cantidad de los elementos disponibles (disp==0) por el valor NA
DF$cant[DF$disp==0] <- NA
DF
# mira que puedes usar attach
attach(DF)
summary(tam)
detach(DF)
## EJERCICIO 2
# de qué tipo es la variable color del data frame DF? cuántos niveles tiene y cuáles son?
class(DF$color)
# crea variables tipo1 y tipo2 de clase factor
tipo1 <- factor(c(1, 2, 2, 1, 1))
tipo2 <- factor(c(0,1,3,1,3))
DF <- data.frame(DF, tipo1, tipo2)
class(DF$tipo1)
DF$tipo1
DF$tipo2
factor(DF$color)
color<- factor(DF$color)
DF$color<- factor(DF$color)
class(DF$color)
remove(color)
color
detach(color)
tipo1*tipo2
#####
DF$color == DF$color
View(DF)
#####
DF$tipo1 == DF$tipo2
version()
version()
(version)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOmetadb")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOsubmission")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
##geo_geoquery.r
##2021-02-16 fgarcia@cipf.es, dmontaner@cipf.es
##GEOquery library example
##Tested using GEOquery Version: "2.25.0"
###Using data from GEO Series GSE37761
## http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE37761
###Clear working environment and load library
rm (list = ls ())
library (GEOquery); packageDescription ("GEOquery", fields = "Version") #"2.50.5"
help (package = GEOquery)
###Download the desired series
datos <- getGEO ("GSE37761")
###Save so you don't need to download them again if the session is closed
save (datos, file = "geo_down.RData")
###Use this if you need to reload the data again
## rm (list = ls ())
## load ("geo_down.RData")
###The data are wrapped in a list
class (datos)
length (datos)
names (datos)
###Unwrap the list (get the first element)
dat <- datos[[1]]
class (dat)
dat
###Explore the ExpressionSet: Expression Values
expr <- exprs (dat)
class (expr)
dim (expr)
expr[1:3,1:5]
boxplot (expr, las = 3)
###Explore the ExpressionSet: Gen Annotation (available information about genes)
fea <- fData (dat)
class (fea)
dim (fea)
colnames (fea)
fea[1:3,]
table (rownames (fea) == rownames (expr))
###Explore the ExpressionSet: Sample Information
sinfo <- pData (dat)
class (sinfo)
dim (sinfo)
sinfo[1:3,1:5]
table (rownames (sinfo) == colnames (expr))
################################################################################
###READING Series Matrix File(s)
datos2 <- getGEO ("GSE17538")  ##usually gives an FTP response timeout error
###Download data form:
## http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE17538
## wget ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE17nnn/GSE17538/matrix/GSE17538-GPL570_series_matrix.txt.gz
## gunzip GSE17538-GPL570_series_matrix.txt.gz
## wc -l GSE17538-GPL570_series_matrix.txt
## grep "^\!" GSE17538-GPL570_series_matrix.txt | wc -l
###read.table CAN BE USED is slow.
datos2 <- read.table (file = "GSE17538-GPL570_series_matrix.txt", header = TRUE, sep = "\t", comment.char = "!", quote = "\"", as.is = TRUE)
class (datos2)
dim (datos2)
datos2[1:3, 1:5]
rownames (datos2) <- datos2[,1]
datos2 <- datos2[,-1]
dim (datos2)
boxplot (datos2)
###EXIT
warnings ()
sessionInfo ()
q ("no")
load("D:/Usuarios/rrrei/Desktop/Bioinformática/Apuntes Julia/Bioinfo_I/2o_cuatri/Bioinformatica_estadistica/juliacorell/data/gse17913.rda")
View(gse17913)
library("data.table")
library("Matrix")
Sys.Date()
install.packages("BiocManager")
install.packages("devtools")
install.packages("limma")
install.packages("igraph")
install.packages("DT")
ñañañññañañña
install.packages("VarfromPDB")
library(VarfromPDB)
help(VarfromPDB)
??VarfromPDB
startdate <- as.Date("2020/2/28")
stopdate <- as.Date("2020/3/1")
stopdate-startdate
?numeric
?logical
?coerce
?ls
myvect <- c(-2,-1,0)
as.logical(myvect)
v <- 1:3
names(v) <- c("a", "b", "c")
v <- 1:3
names(v) <- c("a", "b", "c")
v[4] <- -4
names(v[4])
mylist<-list(1,2,"C",4,5)
unlist(mylist)
library(DescTools)
?cor.test
x <- NA
y <- x/1
y
x <- 5:8
names(x) <- letters[5:8]
x
install.packages("seqMeta")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
install.packages("devtools")
install.packages("seqMeta")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("DavisBrian/seqMeta")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("DavisBrian/seqMeta")
install.packages("seqMeta")
install.packages("seqMeta")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("DavisBrian/seqMeta")
install.packages("bioconductor")
install.packages("pacman")
pacman::p_load("seqMeta")
install.packabes("BiocManager")
install.packages("BiocManager")
pacman::p_load("seqMeta")
devtools::install_github("DavisBrian/seqMeta")
library(ggplot2)
library(readxl)
library(stringr)
library(randomForest)
library(glm)
library(Metrics)
library(glmnet)
library(tidyverse)
library(naniar)
setwd("D:/Usuarios/rrrei/Desktop/doctorado") # casa
e <- 2.7182818284590452353602874713527
data_ine <- read.delim("data_ine_v2.csv", sep = ",", encoding = "latin1")
data_ine <- data_ine[-which(is.na(data_ine$Total)),]
## Intermediate data load
municipios_meta <- read_excel("datos_municipios_sarsaigua_v2.xlsx", sheet = "Municipios")
## Clinical data load
hosp_meta <- read_delim("regiones_hosp.csv")
data_hosp <- read_delim("Registre_de_casos_de_COVID-19_a_Catalunya_per__rea_b_sica_de_salut__ABS__i_sexe.csv")
data_edar <- read_delim("release.csv")
### Data cleaning and wrangling ###
data_edar$Fecha <-as.Date(str_split_fixed(data_edar$`id mostra`, "-", 2)[,2],
format = "%Y-%m-%d")
data_edar$week <- strftime(data_edar$Fecha, format = "%Y %V")
data_hosp2 <- data_hosp %>%
mutate(Fecha = as.Date(TipusCasData, format = "%d/%m/%Y")) %>%
mutate(week = strftime(Fecha, format = "%Y %V")) %>%
select(week, ABSDescripcio, NumCasos) %>%
group_by(week, ABSDescripcio) %>%
summarise(casos = sum(NumCasos))
colnames(data_hosp2) <- c("Week", "Ubicacion", "Casos")
data_hosp3 <- data_hosp2 %>%
mutate(Mun = str_split_fixed(Ubicacion, "\\s{0,1}\\d|\\s-|-\\d|\\s[a-zA-Z]{1}$|-[a-zA-Z]{1}$|/", 2)[,1]) %>%
group_by(Week, Mun) %>%
summarise(Ncasos = sum(Casos)) %>%
mutate(Year = str_split_fixed(Week, " ", 2)[,2])
# Cambio de los datos de municipio para el merge con el data_hosp
# También voy a mergear con los datos del ine y así luego el merge va
# Con el número de habitantes
municipios_meta$Municipio <- toupper(municipios_meta$Municipio)
data_ine$Municipio <- toupper(data_ine$Municipio)
mun_meta_ine <- merge(municipios_meta, data_ine, by = "Municipio", all.x = T)
colnames(mun_meta_ine) <- c("Mun", "Codigo", "EDAR", "Year", "nHab", "CP")
mun_meta_ine <- select(mun_meta_ine, Mun, EDAR, Year, nHab)
## Ahora la unión con las EDAR que esto va a ser lo gracioso
data_merged_clean$EDAR <- str_replace_all(data_merged_clean$EDAR, ",", " ")
load(".RData")
## Ahora la unión con las EDAR que esto va a ser lo gracioso
data_edar$depuradora <- str_replace_all(data_edar$depuradora, "_", " ")
data_edar_red <- data_edar[,c(2,3,4,5,6, 7, 8, 11, 12)]
colnames(data_edar_red) <- c("EDAR", "N1", "N2",
"IP4", "E", "caudal",
"lluvia", "Fecha", "Week")
data_edar_red <- data_edar_red %>%
arrange(Fecha) %>%
mutate(Week = factor(Week, levels = unique(data_edar_red$Week)))
edars <- unique(data_edar_red$EDAR)
new_edar_dfs <- list()
i = 1
edar <- edars[i]
subdata <- filter(data_edar_red, EDAR == edar)
i = 2
edar <- edars[i]
subdata <- filter(data_edar_red, EDAR == edar)
gg_miss_upset(subdata)
vis_miss(data_edar_red)
