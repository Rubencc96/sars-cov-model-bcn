lista1 <- list(color=("rojo","azul","verde","naranja","blanco"), cant=(21,53,14,8,32), disp=(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
lista1 <- list(color=("rojo","azul","verde","naranja","blanco"), cant=(21,53,14,8,32), disp=(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
a <- ("rojo","azul","verde","naranja","blanco")
b <- (21,53,14,8,32)
c <- (TRUE, FALSE, TRUE, TRUE, FALSE)
a <- c("rojo","azul","verde","naranja","blanco")
b <- c(21,53,14,8,32)
c <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
a
lista1 <- list(color=c("rojo","azul","verde","naranja","blanco"), cant=c(21,53,14,8,32), disp=c(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
del a
lista1 <- list(color=c("rojo","azul","verde","naranja","blanco"), cant=c(21,53,14,8,32), disp=c(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
lista1 <- list(color=c("rojo","azul","verde","naranja","blanco"), cant=c(21,53,14,8,32), disp=c(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
DF <- data.frame(lista1)
class(DF)
colnames(DF)
DF <- data.frame(lista1)
DF
class(DF)
DF <- data.frame(DF, tam = c(1.5,0.8,3,2.87,4))
DF
row.names(DF) <- c(O1, O2, O3, O4, O4)
DF
row.names(DF) <- c("O1", "O2", "O3", "O4", "O5")
DF
DF$disp==0 <- NA
DF$cant[DF$disp==0] <- NA
DF
attach(DF)
summary(tam)
class(DF$color)
tipo1 <- factor(c(1, 2, 2, 1, 1))
tipo2 <- factor(c(0,1,3,1,3))
DF <- data.frame(DF, tipo1, tipo2)
class(DF$tipo1)
DF$tipo1
DF$tipo2
df
DF
## EJERCICIO 1
# crea una lista con la siguiente info:
lista1 <- list(color=c("rojo","azul","verde","naranja","blanco"), cant=c(21,53,14,8,32), disp=c(TRUE, FALSE, TRUE, TRUE, FALSE))
lista1
# crea un data frame (DF) y cosas
DF <- data.frame(lista1)
DF
class(DF)
colnames(DF)
# Añade una nueva variable
DF <- data.frame(DF, tam = c(1.5,0.8,3,2.87,4))
DF
# Qué nombres tienen las filas de nuestro data frame
row.names(DF) <- c("O1", "O2", "O3", "O4", "O5")
DF
# sustituye la cantidad de los elementos disponibles (disp==0) por el valor NA
DF$cant[DF$disp==0] <- NA
DF
# mira que puedes usar attach
attach(DF)
summary(tam)
detach(DF)
## EJERCICIO 2
# de qué tipo es la variable color del data frame DF? cuántos niveles tiene y cuáles son?
class(DF$color)
# crea variables tipo1 y tipo2 de clase factor
tipo1 <- factor(c(1, 2, 2, 1, 1))
tipo2 <- factor(c(0,1,3,1,3))
DF <- data.frame(DF, tipo1, tipo2)
class(DF$tipo1)
DF$tipo1
DF$tipo2
factor(DF$color)
color<- factor(DF$color)
DF$color<- factor(DF$color)
class(DF$color)
remove(color)
color
detach(color)
tipo1*tipo2
#####
DF$color == DF$color
View(DF)
#####
DF$tipo1 == DF$tipo2
version()
version()
(version)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOmetadb")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOsubmission")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
##geo_geoquery.r
##2021-02-16 fgarcia@cipf.es, dmontaner@cipf.es
##GEOquery library example
##Tested using GEOquery Version: "2.25.0"
###Using data from GEO Series GSE37761
## http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE37761
###Clear working environment and load library
rm (list = ls ())
library (GEOquery); packageDescription ("GEOquery", fields = "Version") #"2.50.5"
help (package = GEOquery)
###Download the desired series
datos <- getGEO ("GSE37761")
###Save so you don't need to download them again if the session is closed
save (datos, file = "geo_down.RData")
###Use this if you need to reload the data again
## rm (list = ls ())
## load ("geo_down.RData")
###The data are wrapped in a list
class (datos)
length (datos)
names (datos)
###Unwrap the list (get the first element)
dat <- datos[[1]]
class (dat)
dat
###Explore the ExpressionSet: Expression Values
expr <- exprs (dat)
class (expr)
dim (expr)
expr[1:3,1:5]
boxplot (expr, las = 3)
###Explore the ExpressionSet: Gen Annotation (available information about genes)
fea <- fData (dat)
class (fea)
dim (fea)
colnames (fea)
fea[1:3,]
table (rownames (fea) == rownames (expr))
###Explore the ExpressionSet: Sample Information
sinfo <- pData (dat)
class (sinfo)
dim (sinfo)
sinfo[1:3,1:5]
table (rownames (sinfo) == colnames (expr))
################################################################################
###READING Series Matrix File(s)
datos2 <- getGEO ("GSE17538")  ##usually gives an FTP response timeout error
###Download data form:
## http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE17538
## wget ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE17nnn/GSE17538/matrix/GSE17538-GPL570_series_matrix.txt.gz
## gunzip GSE17538-GPL570_series_matrix.txt.gz
## wc -l GSE17538-GPL570_series_matrix.txt
## grep "^\!" GSE17538-GPL570_series_matrix.txt | wc -l
###read.table CAN BE USED is slow.
datos2 <- read.table (file = "GSE17538-GPL570_series_matrix.txt", header = TRUE, sep = "\t", comment.char = "!", quote = "\"", as.is = TRUE)
class (datos2)
dim (datos2)
datos2[1:3, 1:5]
rownames (datos2) <- datos2[,1]
datos2 <- datos2[,-1]
dim (datos2)
boxplot (datos2)
###EXIT
warnings ()
sessionInfo ()
q ("no")
load("D:/Usuarios/rrrei/Desktop/Bioinformática/Apuntes Julia/Bioinfo_I/2o_cuatri/Bioinformatica_estadistica/juliacorell/data/gse17913.rda")
View(gse17913)
library("data.table")
library("Matrix")
Sys.Date()
install.packages("BiocManager")
install.packages("devtools")
install.packages("limma")
install.packages("igraph")
install.packages("DT")
ñañañññañañña
install.packages("VarfromPDB")
library(VarfromPDB)
help(VarfromPDB)
??VarfromPDB
startdate <- as.Date("2020/2/28")
stopdate <- as.Date("2020/3/1")
stopdate-startdate
?numeric
?logical
?coerce
?ls
myvect <- c(-2,-1,0)
as.logical(myvect)
v <- 1:3
names(v) <- c("a", "b", "c")
v <- 1:3
names(v) <- c("a", "b", "c")
v[4] <- -4
names(v[4])
mylist<-list(1,2,"C",4,5)
unlist(mylist)
library(DescTools)
?cor.test
x <- NA
y <- x/1
y
x <- 5:8
names(x) <- letters[5:8]
x
install.packages("seqMeta")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
install.packages("devtools")
install.packages("seqMeta")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("DavisBrian/seqMeta")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("DavisBrian/seqMeta")
install.packages("seqMeta")
install.packages("seqMeta")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("DavisBrian/seqMeta")
install.packages("bioconductor")
install.packages("pacman")
pacman::p_load("seqMeta")
install.packabes("BiocManager")
install.packages("BiocManager")
pacman::p_load("seqMeta")
devtools::install_github("DavisBrian/seqMeta")
install.packages("glmnet")
library(dplyr)
library(ggplot2)
library(readxl)
library(tidyverse)
library(stringr)
library(randomForest)
library(glm)
library(Metrics)
setwd("D:/Usuarios/rrrei/Desktop/doctorado") # casa
load("RData")
r22
ggplot(data = testing_data, aes(x = prediction, y = Ncasos_norm)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
annotate("text", x = min(testing_data$prediction), y = max(testing_data$Ncasos_norm),
label = paste0("R² = ", round(r2, 2))) +
theme_bw()
r22 = cor(testing_data$denorm_pred, testing_data$Ncasos)**2
ggplot(data = testing_data, aes(x = denorm_pred, y = Ncasos)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
annotate("text", x = min(testing_data$denorm_pred), y = max(testing_data$Ncasos),
label = paste0("R² = ", round(r22, 2))) +
theme_bw()
ggplot(ImpData, aes(x=Var.Names, y=`%IncMSE`)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=`%IncMSE`), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
rmse_casos <- e**rmse
rmse_casos
rmse
View(testing_data)
View(model_data6)
View(model_data)
ggplot(model_data) +
geom_point(aes(x = Ncasos, y = N1), color = "red") +
geom_point(aes(x = Ncasos, y = N2), color = "blue") +
geom_point(aes(x = Ncasos, y = IP4), color = "green") +
geom_point(aes(x = Ncasos, y = E), color = "#B4234F")
model_data %>% pivot_longer(!c(Week, Mun, EDAR, Year, Fecha), names_to = "Variable") %>%
ggplot(aes(x = Variable, y = value)) +
geom_boxplot() +
facet_grid(.~Variable, scales = "free_y")
training_indices <- sample(nrow(model_data5), nrow(model_data6)*.8)
training_data <- model_data6[training_indices, ]
testing_data <- model_data6[-training_indices, ]
rf2.fit <- randomForest(formula = Ncasos_norm ~ N1_norm + N2_norm + IP4_norm + E_norm +
N1_norm:lluvia + N2_norm:lluvia + IP4_norm:lluvia + E_norm:lluvia +
N1_norm:caudal + N2_norm:caudal + IP4_norm:caudal + E_norm:caudal,
data = training_data,
ntree = 1000,
importance = T)
predictions <- predict(rf.fit, newdata = testing_data)
rmse <- rmse(predictions, testing_data$Ncasos_norm)
r2 <- cor(predictions, testing_data$Ncasos_norm)^2
rmse_casos <- e**rmse
r2
rmse_casos
ImpData <- as.data.frame(importance(rf2.fit))
ImpData$Var.Names <- row.names(ImpData)
ggplot(ImpData, aes(x=Var.Names, y=`%IncMSE`)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=`%IncMSE`), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(data = testing_data, aes(x = prediction, y = Ncasos_norm)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
annotate("text", x = min(testing_data$prediction), y = max(testing_data$Ncasos_norm),
label = paste0("R² = ", round(r2, 2))) +
theme_bw()
r22 = cor(testing_data$denorm_pred, testing_data$Ncasos)**2
ggplot(data = testing_data, aes(x = denorm_pred, y = Ncasos)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
annotate("text", x = min(testing_data$denorm_pred), y = max(testing_data$Ncasos),
label = paste0("R² = ", round(r22, 2))) +
theme_bw()
View(training_data)
View(testing_data)
predictions
testing_data$prediction = predictions
testing_data$denorm_pred = e**predictions
ggplot(data = testing_data, aes(x = prediction, y = Ncasos_norm)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
annotate("text", x = min(testing_data$prediction), y = max(testing_data$Ncasos_norm),
label = paste0("R² = ", round(r2, 2))) +
theme_bw()
r22 = cor(testing_data$denorm_pred, testing_data$Ncasos)**2
ggplot(data = testing_data, aes(x = denorm_pred, y = Ncasos)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
annotate("text", x = min(testing_data$denorm_pred), y = max(testing_data$Ncasos),
label = paste0("R² = ", round(r22, 2))) +
theme_bw()
View(testing_data[,c("Ncasos", "Ncasos_norm","denorm_prediction", "prediction")])
View(testing_data[,c("Ncasos", "Ncasos_norm","denorm_pred", "prediction")])
colnames(testing_data)
View(testing_data[,c("Mun","Ncasos", "Ncasos_norm","denorm_pred", "prediction")])
library(glmnet)
training_indices <- sample(nrow(model_data6), nrow(model_data6)*.8)
training_data <- model_data6[training_indices, ]
testing_data <- model_data6[-training_indices, ]
install.packages("caret")
lambdas <- 10^seq(2, -3, by = -.1)
lambdas
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas)
?glmnet
colnames(model_data)
model_data %>% pivot_longer(!c(Week, Mun, EDAR, Year, Fecha), names_to = "Variable") %>%
ggplot(aes(x = Variable, y = value)) +
geom_boxplot() +
facet_grid(.~Variable, scales = "free_y")
View(model_data)
model_data %>% arrange("nHab")
model_data %>% arrange("nHab", desc = T)
model_data %>% arrange(nHab, desc = T)
model_data %>% arrange(nHab, desc = F)
model_data %>% arrange(nHab)
?arrange
model_data %>% arrange(nHab)
model_data %>% arrange(desc(nHab))
model_data %>% arrange(desc(nHab), Fecha)
model_data %>% arrange(desc(nHab), Fecha) %>%
select(Mun)
colnames(model_data)
top_mun <- model_data %>% arrange(desc(nHab)) %>%
select(Mun)
?select
unique(top_mun[,"Mun"])[1:10]
top_mun
top_mun <- model_data %>% arrange(desc(nHab))
unique(top_mun[,"Mun"])[1:10]
unique(top_mun[,"Mun"])
unique(data.frame(top_mun[,"Mun"]))
unique(data.frame(top_mun[,"Mun"]))[1:10]
unique()
unique(data.frame(top_mun[,"Mun", drop = T]))[1:10]
unique(data.frame(top_mun[,"Mun", drop = T]))
unlist(unique(data.frame(top_mun[,"Mun", drop = T])))
unlist(unique(data.frame(top_mun[,"Mun", drop = T])))[1:10]
top_mun_list = unlist(unique(data.frame(top_mun[,"Mun", drop = T])))[1:10]
model_data_viz <- model_data[model_data$Mun %in% top_mun_list,]
install.packages("ggridges")
library(ggridges)
colnames(model_data_viz)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = N1, group = Mun)) %>%
geom_ridgeline()
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = N1, group = Mun)) +
geom_ridgeline()
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = N1)) +
geom_ridgeline()
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = N1, color = Mun)) +
geom_ridgeline()
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = N1, fill = Mun)) +
geom_ridgeline()
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = N1, fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = N2, fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = Ncasos, fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(Ncasos+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(N1+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(N2+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(E+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
names(model_data)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(IP4+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
top_mun <- model_data %>% arrange(nHab)
top_mun_list = unlist(unique(data.frame(top_mun[,"Mun", drop = T])))[1:10]
model_data_viz <- model_data[model_data$Mun %in% top_mun_list,]
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(IP4+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(N1+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(N2+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(IP4+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = 1)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(IP4+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = .8)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(N1+1), fill = Mun)) +
geom_density_ridges(stat = "identity", scale = .8)
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(N1+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = N1), fill = Mun)) +
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = N1, fill = Mun)) +
geom_density_ridges(stat = "identity")
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(N1+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
top_mun <- model_data %>% arrange(desc(nHab))
top_mun_list = unlist(unique(data.frame(top_mun[,"Mun", drop = T])))[1:10]
model_data_viz <- model_data[model_data$Mun %in% top_mun_list,]
model_data_viz %>% arrange(Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(N1+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
top_mun_list = factor(unlist(unique(data.frame(top_mun[,"Mun", drop = T])))[1:10])
top_mun_list
top_mun_list = unlist(unique(data.frame(top_mun[,"Mun", drop = T])))[1:10]
top_mun_list
top_mun_list = unlist(unique(data.frame(top_mun[,"Mun", drop = T])))[1:10]
model_data_viz <- model_data[model_data$Mun %in% top_mun_list,]
model_data_viz %>% arrange(desc(nHab), Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(N1+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
model_data_viz %>% arrange(desc(nHab), Fecha) %>%
ggplot(aes(x = Fecha, y = Mun, group = Mun, height = log(Ncasos+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
top_mun <- model_data %>% arrange(desc(nHab))
top_mun_list = unlist(unique(data.frame(top_mun[,"Mun", drop = T])))[1:10]
model_data_viz %>% arrange(desc(nHab), Fecha) %>%
ggplot(aes(x = Fecha, y = factor(Mun), group = Mun, height = log(Ncasos+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
model_data_viz$Mun = factor(model_data_viz$Mun, levels = unique(model_data_viz$Mun))
ggplot(data = model_data_viz, aes(x = Fecha, y = Mun, group = Mun, height = log(Ncasos+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
model_data_viz$Mun
View(model_data_viz)
model_data_viz %>% arrange(desc(nHab))
View(model_data_viz)
model_data_viz <- model_data_viz %>% arrange(desc(nHab))
model_data_viz$Mun = factor(model_data_viz$Mun, levels = unique(model_data_viz$Mun))
ggplot(data = model_data_viz, aes(x = Fecha, y = Mun, group = Mun, height = log(Ncasos+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
ggplot(data = model_data_viz, aes(x = Fecha, y = Mun, group = Mun, height = log(N1+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
ggplot(data = model_data_viz, aes(x = Fecha, y = Mun, group = Mun, height = log(N2+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
ggplot(data = model_data_viz, aes(x = Fecha, y = Mun, group = Mun, height = log(IP4+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
ggplot(data = model_data_viz, aes(x = Fecha, y = Mun, group = Mun, height = log(E+1), fill = Mun)) +
geom_density_ridges(stat = "identity")
save(RData)
save(file = "RData2310")
save.image(file = "RData2310")
